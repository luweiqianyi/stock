// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	transactionResultFieldNames          = builder.RawFieldNames(&TransactionResult{})
	transactionResultRows                = strings.Join(transactionResultFieldNames, ",")
	transactionResultRowsExpectAutoSet   = strings.Join(stringx.Remove(transactionResultFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	transactionResultRowsWithPlaceHolder = strings.Join(stringx.Remove(transactionResultFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	transactionResultModel interface {
		Insert(ctx context.Context, data *TransactionResult) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TransactionResult, error)
		Update(ctx context.Context, data *TransactionResult) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTransactionResultModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TransactionResult struct {
		Id          int64           `db:"id"`
		StockCode   string          `db:"stock_code"`   // stock_code
		StockName   sql.NullString  `db:"stock_name"`   // stock_name
		BuyPrice    sql.NullFloat64 `db:"buy_price"`    // buy_price
		SellPrice   sql.NullFloat64 `db:"sell_price"`   // sell_price
		Number      sql.NullFloat64 `db:"number"`       // number
		BuyDate     sql.NullTime    `db:"buy_date"`     // buy_date
		SellDate    sql.NullTime    `db:"sell_date"`    // sell_date
		BuyCost     sql.NullFloat64 `db:"buy_cost"`     // buy_cost
		SellCost    sql.NullFloat64 `db:"sell_cost"`    // sell_cost
		TotalCost   sql.NullFloat64 `db:"total_cost"`   // total_cost
		Rate        sql.NullFloat64 `db:"rate"`         // rate
		GainLoss    sql.NullFloat64 `db:"gain_loss"`    // gain_loss
		FinalProfit sql.NullFloat64 `db:"final_profit"` // final_profit
	}
)

func newTransactionResultModel(conn sqlx.SqlConn) *defaultTransactionResultModel {
	return &defaultTransactionResultModel{
		conn:  conn,
		table: "`transaction_result`",
	}
}

func (m *defaultTransactionResultModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTransactionResultModel) FindOne(ctx context.Context, id int64) (*TransactionResult, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", transactionResultRows, m.table)
	var resp TransactionResult
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTransactionResultModel) Insert(ctx context.Context, data *TransactionResult) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, transactionResultRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.StockCode, data.StockName, data.BuyPrice, data.SellPrice, data.Number, data.BuyDate, data.SellDate, data.BuyCost, data.SellCost, data.TotalCost, data.Rate, data.GainLoss, data.FinalProfit)
	return ret, err
}

func (m *defaultTransactionResultModel) Update(ctx context.Context, data *TransactionResult) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, transactionResultRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.StockCode, data.StockName, data.BuyPrice, data.SellPrice, data.Number, data.BuyDate, data.SellDate, data.BuyCost, data.SellCost, data.TotalCost, data.Rate, data.GainLoss, data.FinalProfit, data.Id)
	return err
}

func (m *defaultTransactionResultModel) tableName() string {
	return m.table
}
